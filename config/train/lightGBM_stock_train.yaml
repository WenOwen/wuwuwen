# LightGBM 股票数据训练配置文件
# 专门针对parquet格式股票数据的训练配置
#
# 使用说明：
# 1. 首先运行数据预处理脚本: python stock_data_processor.py
# 2. 确保professional_parquet目录包含股票数据文件
# 3. 运行训练脚本: python lightgbm_stock_train.py --config config/train/lightGBM_stock_train.yaml
#
# 文件结构说明：
# 每次训练会创建独立的文件夹来存放所有相关文件：
# ./models/lightgbm_stock/training_001/    - 模型文件
#   ├── lightgbm_stock_model.pkl           - 训练好的模型
#   ├── scaler.pkl                         - 数据标准化器
#   ├── feature_names.json                 - 详细特征名称信息
#   └── feature_names_simple.txt           - 简单特征名称列表
# ./results/lightgbm_stock/training_001/   - 结果文件
#   ├── metrics.json                       - 评估指标
#   ├── predictions.csv                    - 预测结果
#   ├── feature_importance.csv             - 特征重要性（详细）
#   └── top_features.txt                   - 前20个重要特征（可视化）

# ===========================================
# 数据配置
# ===========================================
data:
  # 数据路径配置
  # 指向股票数据预处理脚本的输出目录
  data_dir: "./data/processed_stock_data"  # 自动寻找最新的processed_*文件夹
  
  # 原始股票数据路径（用于数据预处理）
  source_data:
    parquet_dir: "./data/professional_parquet"  # parquet原始数据目录
    auto_process: true                          # 是否自动运行数据预处理
    
  # 数据文件名称 (CSV格式)
  X_features_file: "X_features.csv"        # 特征数据文件
  y_targets_file: "y_targets.csv"          # 目标数据文件
  full_data_file: "full_data.csv"          # 完整数据文件 (特征+目标+股票代码)
  stock_codes_file: "stock_codes.json"     # 股票代码信息文件
  data_info_file: "data_info.json"         # 数据处理信息文件
  
  # 数据加载选项
  loading_options:
    prefer_full_data: true
    encoding: "utf-8"
    validate_data: true
    
  # 股票数据特定选项
  stock_specific:
    # 股票代码处理
    code_handling:
      validate_codes: true                  # 验证股票代码格式
      filter_st_stocks: false              # 是否过滤ST股票
      min_trading_days: 30                  # 最少交易天数
      
    # 时序特征处理
    time_series:
      lookback_days: 5                      # 历史回看天数
      target_days: 1                        # 预测天数
      include_technical_indicators: true     # 包含技术指标
      
  # 数据预处理
  preprocessing:
    # 特征工程
    feature_engineering:
      # 股票特有特征
      stock_features:
        - "price_momentum"    # 价格动量
        - "volume_pattern"    # 成交量模式
        - "volatility"        # 波动率
        - "relative_strength" # 相对强度
        
      # 统计特征
      statistical_features:
        - "mean"      # 均值
        - "std"       # 标准差
        - "max"       # 最大值
        - "min"       # 最小值
        - "skew"      # 偏度
        - "median"    # 中位数
        
      # 技术指标特征
      technical_features:
        enabled: true
        features:
          - "rsi"            # 相对强弱指标
          - "macd"           # MACD指标
          - "bollinger"      # 布林带
          - "moving_average" # 移动平均
    
    # 数据标准化（重要：股票数据通常需要标准化）
    normalization:
      method: "robust"  # robust标准化对异常值更鲁棒
      
    # 异常值处理（股票数据异常值较多）
    outlier_handling:
      enabled: true
      method: "winsorize"  # 使用winsorize方法
      winsorize_limits: [0.01, 0.01]  # 1%和99%分位数截断

# ===========================================
# 训练配置
# ===========================================
training:
  # 数据分割（时序数据需要特殊处理）
  data_split:
    test_size: 0.2
    validation_size: 0.1
    random_state: 42
    stratify: false
    # 时序分割（重要：股票数据应使用时序分割）
    time_series_split: true
    
  # 交叉验证
  cross_validation:
    enabled: true
    cv_folds: 5
    cv_strategy: "time_series"  # 时序交叉验证
    
  # 训练参数
  training_params:
    early_stopping_rounds: 100
    verbose: 100
    eval_metric: ["rmse", "mae", "mape"]

# ===========================================
# LightGBM 模型参数（针对股票数据优化）
# ===========================================
lightgbm:
  # 基础参数
  basic_params:
    objective: "regression"     # 回归任务（预测股价变化）
    metric: "rmse"
    boosting_type: "gbdt"       
    num_leaves: 63              # 适中的叶子数
    learning_rate: 0.05         # 较低的学习率提高稳定性
    feature_fraction: 0.8       # 特征采样
    bagging_fraction: 0.8       # 样本采样
    bagging_freq: 5
    verbose: -1
    random_state: 42
    
  # 进阶参数（针对股票数据的过拟合控制）
  advanced_params:
    max_depth: 6                # 限制树深度
    min_data_in_leaf: 50        # 增加叶子最小样本数
    min_gain_to_split: 0.1      # 分裂增益阈值
    lambda_l1: 0.1              # L1正则化
    lambda_l2: 0.1              # L2正则化
    min_data_in_bin: 3
    bin_construct_sample_cnt: 200000
    
  # 训练参数
  fit_params:
    num_boost_round: 1000
    categorical_feature: "auto"

# ===========================================
# 特征选择（对股票数据很重要）
# ===========================================
feature_selection:
  enabled: true
  methods:
    # 基于重要性的选择
    importance_based:
      enabled: true
      threshold: 0.005  # 重要性阈值
      
    # 基于相关性的选择（股票特征可能高度相关）
    correlation_based:
      enabled: true
      threshold: 0.90   # 相关性阈值
      
    # 递归特征消除
    rfe:
      enabled: true
      n_features_to_select: 100
      step: 0.1

# ===========================================
# 超参数优化
# ===========================================
hyperparameter_tuning:
  enabled: true
  method: "optuna"
  
  # Optuna 配置
  optuna_config:
    n_trials: 30                # 试验次数
    timeout: 1800               # 30分钟
    
    # 参数搜索空间（针对股票数据）
    param_ranges:
      num_leaves: [31, 127]
      learning_rate: [0.01, 0.1]
      feature_fraction: [0.6, 0.9]
      bagging_fraction: [0.6, 0.9]
      min_data_in_leaf: [20, 100]
      lambda_l1: [0.0, 1.0]
      lambda_l2: [0.0, 1.0]
      max_depth: [4, 8]

# ===========================================
# 输出配置
# ===========================================
output:
  # 文件命名配置
  file_naming:
    identifier_type: "unique_id"
    unique_id_digits: 3
    folder_name_prefix: "stock_training"  # 股票训练前缀
    show_id_in_log: true
  
  # 模型保存
  model_save:
    save_dir: "./models/lightgbm_stock"   # 股票模型目录
    model_name: "lightgbm_stock_model"
    save_format: ["pkl", "txt"]
    
  # 结果保存
  results_save:
    save_dir: "./results/lightgbm_stock"  # 股票结果目录
    save_predictions: true
    save_feature_importance: true
    save_metrics: true
    save_plots: true
    # 股票特有保存选项
    save_stock_predictions: true          # 按股票保存预测结果
    save_daily_metrics: true              # 按日期保存指标
    
  # 日志配置
  logging:
    log_level: "INFO"
    log_file: "./logs/lightgbm_stock_training.log"
    console_output: true

# ===========================================
# 评估配置（股票预测评估）
# ===========================================
evaluation:
  # 评估指标（适合股票预测）
  metrics:
    - "rmse"                    # 均方根误差
    - "mae"                     # 平均绝对误差
    - "mape"                    # 平均绝对百分比误差
    - "r2_score"               # R平方
    - "explained_variance"      # 解释方差
    - "directional_accuracy"    # 方向准确率（股票特有）
    
  # 股票特有评估
  stock_evaluation:
    enabled: true
    # 按涨跌幅范围评估
    return_ranges:
      - name: "small_changes"
        range: [-2, 2]
      - name: "medium_changes" 
        range: [-5, 5]
      - name: "large_changes"
        range: [-10, 10]
        
    # 按股票市值评估
    market_cap_evaluation: false
    
  # 可视化
  visualization:
    enabled: true
    plots:
      - "feature_importance"
      - "prediction_vs_actual"
      - "residuals"
      - "learning_curve"
      - "stock_prediction_distribution"  # 股票预测分布
      - "daily_performance"              # 每日表现

# ===========================================
# 其他配置
# ===========================================
misc:
  # 并行计算
  n_jobs: -1
  
  # 内存优化
  memory_optimization:
    enabled: true
    chunk_size: 10000
    
  # 随机种子
  random_seed: 42
  
  # GPU 支持
  gpu_config:
    enabled: false
    device_type: "cuda"

# ===========================================
# 股票数据特有配置
# ===========================================
stock_specific_config:
  # 数据质量控制
  data_quality:
    # 过滤异常交易日
    filter_abnormal_days: true
    # 最小成交量要求
    min_volume_threshold: 1000
    # 价格变化限制
    max_price_change: 0.2  # 20%涨跌停限制
    
  # 风险控制
  risk_management:
    # 预测值限制
    prediction_limits: [-0.2, 0.2]  # 预测涨跌幅限制在±20%
    # 异常预测检测
    outlier_prediction_handling: "clip"
    
  # 回测配置
  backtesting:
    enabled: false  # 是否启用回测
    start_date: "2023-01-01"
    end_date: "2023-12-31"
    initial_capital: 1000000  # 初始资金100万